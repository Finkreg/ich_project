### **Цель проекта**
Создать консольное приложение для поиска фильмов по базе данных sakila с возможностью:
1. Искать фильмы:
   - По ключевому слову (10+ результатов).
   - По жанру и году (10+ результатов).
2. Сохранять все поисковые запросы в отдельной таблице.
3. Выводить список самых популярных запросов по частоте использования.

---

### **Этапы выполнения проекта и критерии**

#### **1. Изучение структуры базы данных**
- Подключение к базе данных sakila.
- Анализ таблиц и связей.

**Критерии:**
- Понимание структуры базы данных.

---

#### **2. Разработка SQL-запросов для сценариев**
- Написание запросов для поиска фильмов:
  - По ключевому слову (например поиск в названии фильма).
  - По жанру и году.
- Создать базу данных на сервере на запись с названием group_111124_fp_{name_surname}
- Написание запроса для сохранения поисковых запросов (`INSERT INTO`).
- Написание запроса для вывода популярных запросов.

**Критерии:**
- Запросы возвращают корректные результаты.
- Запросы возвращают только необходимую информацию.
- Обработка ситуаций, когда данные не найдены (например, возврат пустого списка).

---

#### **3. Разработка консольного приложения**
- **Интерактивный режим работы:**
  - Пользователь вводит команды в консоли, а программа реагирует соответствующим образом.
  - Реализованы команды:
    - Поиск по ключевому слову.
    - Поиск по жанру и году.
    - Вывод популярных запросов.
- **Архитектура приложения (необязательно):**
  - Работа с базой данных вынесена в отдельный модуль.
  - Логика пользовательского взаимодействия (считывание и обработка команд) вынесена в другой модуль.
  - Отображение результатов (например, форматированный вывод в консоль) реализовано в отдельном модуле.
- **Функционал:**
  - Результаты поиска фильмов корректно выводятся в консоль.
  - Поисковые запросы сохраняются в базе данных.
  - Список популярных запросов выводится в порядке убывания частоты.
  - Обработка ошибок (например, отсутствует соединение с базой, неправильный ввод команды).
  - Программа не завершается после одного запроса, а продолжает взаимодействовать с пользователем ("перемещение" по меню).

**Критерии:**
- Приложение работает без ошибок и зависаний.
- Код структурирован, соблюдаются принципы модульности, нет дублирования кода.
- Пользовательский интерфейс удобен и понятен.
- Реализована обработка ошибок и вывод информативных сообщений.

---

### **Дополнительные критерии оценки**
1. **Документация:**
   - В коде присутствуют комментарии.
   - Написан README-файл, который описывает:
     - Цель проекта.
     - Инструкцию по установке базы данных.
     - Описание доступных команд приложения.
     - Пример использования.

2. **Качество кода:**
   - Использование PEP 8.
   - Чтение и поддержка кода не вызывает затруднений.

3. **Тестирование:**
   - Протестированы все команды приложения.
   - Обработаны случаи отсутствия результатов поиска.

4. **Улучшения (необязательно):**
   - Добавлена возможность фильтрации по дополнительным критериям (например, рейтинг фильма).
   - Логи ошибок записываются в отдельный файл.

---

### **Финальный результат**
Проект будет считаться успешным, если:
- Приложение корректно выполняет все указанные сценарии.
- Код структурирован, работает стабильно и покрывает основные случаи использования.


Creds
ich-db.edu.itcareerhub.de
ich1
password